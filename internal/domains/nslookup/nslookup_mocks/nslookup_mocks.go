// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package nslookup_mocks

import (
	"net"

	"github.com/Fivegen-LLC/sdwan-lib/pkg/config"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIConfigService creates a new instance of MockIConfigService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIConfigService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIConfigService {
	mock := &MockIConfigService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIConfigService is an autogenerated mock type for the IConfigService type
type MockIConfigService struct {
	mock.Mock
}

type MockIConfigService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIConfigService) EXPECT() *MockIConfigService_Expecter {
	return &MockIConfigService_Expecter{mock: &_m.Mock}
}

// GetConfig provides a mock function for the type MockIConfigService
func (_mock *MockIConfigService) GetConfig() (config.Config, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 config.Config
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (config.Config, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() config.Config); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(config.Config)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIConfigService_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockIConfigService_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *MockIConfigService_Expecter) GetConfig() *MockIConfigService_GetConfig_Call {
	return &MockIConfigService_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *MockIConfigService_GetConfig_Call) Run(run func()) *MockIConfigService_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIConfigService_GetConfig_Call) Return(cfg config.Config, err error) *MockIConfigService_GetConfig_Call {
	_c.Call.Return(cfg, err)
	return _c
}

func (_c *MockIConfigService_GetConfig_Call) RunAndReturn(run func() (config.Config, error)) *MockIConfigService_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockILookupIPService creates a new instance of MockILookupIPService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockILookupIPService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockILookupIPService {
	mock := &MockILookupIPService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockILookupIPService is an autogenerated mock type for the ILookupIPService type
type MockILookupIPService struct {
	mock.Mock
}

type MockILookupIPService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockILookupIPService) EXPECT() *MockILookupIPService_Expecter {
	return &MockILookupIPService_Expecter{mock: &_m.Mock}
}

// LookupIP provides a mock function for the type MockILookupIPService
func (_mock *MockILookupIPService) LookupIP(address string) ([]net.IP, error) {
	ret := _mock.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for LookupIP")
	}

	var r0 []net.IP
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]net.IP, error)); ok {
		return returnFunc(address)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []net.IP); ok {
		r0 = returnFunc(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.IP)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(address)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockILookupIPService_LookupIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupIP'
type MockILookupIPService_LookupIP_Call struct {
	*mock.Call
}

// LookupIP is a helper method to define mock.On call
//   - address string
func (_e *MockILookupIPService_Expecter) LookupIP(address interface{}) *MockILookupIPService_LookupIP_Call {
	return &MockILookupIPService_LookupIP_Call{Call: _e.mock.On("LookupIP", address)}
}

func (_c *MockILookupIPService_LookupIP_Call) Run(run func(address string)) *MockILookupIPService_LookupIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockILookupIPService_LookupIP_Call) Return(ips []net.IP, err error) *MockILookupIPService_LookupIP_Call {
	_c.Call.Return(ips, err)
	return _c
}

func (_c *MockILookupIPService_LookupIP_Call) RunAndReturn(run func(address string) ([]net.IP, error)) *MockILookupIPService_LookupIP_Call {
	_c.Call.Return(run)
	return _c
}
