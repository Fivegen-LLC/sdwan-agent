// Code generated by mockery v2.53.4. DO NOT EDIT.

package nslookup_mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// ILookupIPService is an autogenerated mock type for the ILookupIPService type
type ILookupIPService struct {
	mock.Mock
}

type ILookupIPService_Expecter struct {
	mock *mock.Mock
}

func (_m *ILookupIPService) EXPECT() *ILookupIPService_Expecter {
	return &ILookupIPService_Expecter{mock: &_m.Mock}
}

// LookupIP provides a mock function with given fields: address
func (_m *ILookupIPService) LookupIP(address string) ([]net.IP, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for LookupIP")
	}

	var r0 []net.IP
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]net.IP, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(string) []net.IP); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.IP)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ILookupIPService_LookupIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupIP'
type ILookupIPService_LookupIP_Call struct {
	*mock.Call
}

// LookupIP is a helper method to define mock.On call
//   - address string
func (_e *ILookupIPService_Expecter) LookupIP(address interface{}) *ILookupIPService_LookupIP_Call {
	return &ILookupIPService_LookupIP_Call{Call: _e.mock.On("LookupIP", address)}
}

func (_c *ILookupIPService_LookupIP_Call) Run(run func(address string)) *ILookupIPService_LookupIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ILookupIPService_LookupIP_Call) Return(ips []net.IP, err error) *ILookupIPService_LookupIP_Call {
	_c.Call.Return(ips, err)
	return _c
}

func (_c *ILookupIPService_LookupIP_Call) RunAndReturn(run func(string) ([]net.IP, error)) *ILookupIPService_LookupIP_Call {
	_c.Call.Return(run)
	return _c
}

// NewILookupIPService creates a new instance of ILookupIPService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILookupIPService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILookupIPService {
	mock := &ILookupIPService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
