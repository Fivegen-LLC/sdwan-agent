// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package monitoring_mocks

import (
	"github.com/Fivegen-LLC/sdwan-lib/pkg/config"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIMessagePublisher creates a new instance of MockIMessagePublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMessagePublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMessagePublisher {
	mock := &MockIMessagePublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIMessagePublisher is an autogenerated mock type for the IMessagePublisher type
type MockIMessagePublisher struct {
	mock.Mock
}

type MockIMessagePublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIMessagePublisher) EXPECT() *MockIMessagePublisher_Expecter {
	return &MockIMessagePublisher_Expecter{mock: &_m.Mock}
}

// IsActive provides a mock function for the type MockIMessagePublisher
func (_mock *MockIMessagePublisher) IsActive() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsActive")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockIMessagePublisher_IsActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsActive'
type MockIMessagePublisher_IsActive_Call struct {
	*mock.Call
}

// IsActive is a helper method to define mock.On call
func (_e *MockIMessagePublisher_Expecter) IsActive() *MockIMessagePublisher_IsActive_Call {
	return &MockIMessagePublisher_IsActive_Call{Call: _e.mock.On("IsActive")}
}

func (_c *MockIMessagePublisher_IsActive_Call) Run(run func()) *MockIMessagePublisher_IsActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIMessagePublisher_IsActive_Call) Return(b bool) *MockIMessagePublisher_IsActive_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockIMessagePublisher_IsActive_Call) RunAndReturn(run func() bool) *MockIMessagePublisher_IsActive_Call {
	_c.Call.Return(run)
	return _c
}

// Reconnect provides a mock function for the type MockIMessagePublisher
func (_mock *MockIMessagePublisher) Reconnect() {
	_mock.Called()
	return
}

// MockIMessagePublisher_Reconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reconnect'
type MockIMessagePublisher_Reconnect_Call struct {
	*mock.Call
}

// Reconnect is a helper method to define mock.On call
func (_e *MockIMessagePublisher_Expecter) Reconnect() *MockIMessagePublisher_Reconnect_Call {
	return &MockIMessagePublisher_Reconnect_Call{Call: _e.mock.On("Reconnect")}
}

func (_c *MockIMessagePublisher_Reconnect_Call) Run(run func()) *MockIMessagePublisher_Reconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIMessagePublisher_Reconnect_Call) Return() *MockIMessagePublisher_Reconnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIMessagePublisher_Reconnect_Call) RunAndReturn(run func()) *MockIMessagePublisher_Reconnect_Call {
	_c.Run(run)
	return _c
}

// NewMockIConfigService creates a new instance of MockIConfigService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIConfigService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIConfigService {
	mock := &MockIConfigService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIConfigService is an autogenerated mock type for the IConfigService type
type MockIConfigService struct {
	mock.Mock
}

type MockIConfigService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIConfigService) EXPECT() *MockIConfigService_Expecter {
	return &MockIConfigService_Expecter{mock: &_m.Mock}
}

// GetConfig provides a mock function for the type MockIConfigService
func (_mock *MockIConfigService) GetConfig() (config.Config, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 config.Config
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (config.Config, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() config.Config); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(config.Config)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIConfigService_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockIConfigService_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *MockIConfigService_Expecter) GetConfig() *MockIConfigService_GetConfig_Call {
	return &MockIConfigService_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *MockIConfigService_GetConfig_Call) Run(run func()) *MockIConfigService_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIConfigService_GetConfig_Call) Return(cfg config.Config, err error) *MockIConfigService_GetConfig_Call {
	_c.Call.Return(cfg, err)
	return _c
}

func (_c *MockIConfigService_GetConfig_Call) RunAndReturn(run func() (config.Config, error)) *MockIConfigService_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIDiscoveryService creates a new instance of MockIDiscoveryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDiscoveryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDiscoveryService {
	mock := &MockIDiscoveryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIDiscoveryService is an autogenerated mock type for the IDiscoveryService type
type MockIDiscoveryService struct {
	mock.Mock
}

type MockIDiscoveryService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIDiscoveryService) EXPECT() *MockIDiscoveryService_Expecter {
	return &MockIDiscoveryService_Expecter{mock: &_m.Mock}
}

// FetchPrimary provides a mock function for the type MockIDiscoveryService
func (_mock *MockIDiscoveryService) FetchPrimary(hosts []string) (string, error) {
	ret := _mock.Called(hosts)

	if len(ret) == 0 {
		panic("no return value specified for FetchPrimary")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]string) (string, error)); ok {
		return returnFunc(hosts)
	}
	if returnFunc, ok := ret.Get(0).(func([]string) string); ok {
		r0 = returnFunc(hosts)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func([]string) error); ok {
		r1 = returnFunc(hosts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIDiscoveryService_FetchPrimary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchPrimary'
type MockIDiscoveryService_FetchPrimary_Call struct {
	*mock.Call
}

// FetchPrimary is a helper method to define mock.On call
//   - hosts []string
func (_e *MockIDiscoveryService_Expecter) FetchPrimary(hosts interface{}) *MockIDiscoveryService_FetchPrimary_Call {
	return &MockIDiscoveryService_FetchPrimary_Call{Call: _e.mock.On("FetchPrimary", hosts)}
}

func (_c *MockIDiscoveryService_FetchPrimary_Call) Run(run func(hosts []string)) *MockIDiscoveryService_FetchPrimary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIDiscoveryService_FetchPrimary_Call) Return(primary string, err error) *MockIDiscoveryService_FetchPrimary_Call {
	_c.Call.Return(primary, err)
	return _c
}

func (_c *MockIDiscoveryService_FetchPrimary_Call) RunAndReturn(run func(hosts []string) (string, error)) *MockIDiscoveryService_FetchPrimary_Call {
	_c.Call.Return(run)
	return _c
}

// GetHosts provides a mock function for the type MockIDiscoveryService
func (_mock *MockIDiscoveryService) GetHosts() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHosts")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockIDiscoveryService_GetHosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHosts'
type MockIDiscoveryService_GetHosts_Call struct {
	*mock.Call
}

// GetHosts is a helper method to define mock.On call
func (_e *MockIDiscoveryService_Expecter) GetHosts() *MockIDiscoveryService_GetHosts_Call {
	return &MockIDiscoveryService_GetHosts_Call{Call: _e.mock.On("GetHosts")}
}

func (_c *MockIDiscoveryService_GetHosts_Call) Run(run func()) *MockIDiscoveryService_GetHosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIDiscoveryService_GetHosts_Call) Return(strings []string) *MockIDiscoveryService_GetHosts_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockIDiscoveryService_GetHosts_Call) RunAndReturn(run func() []string) *MockIDiscoveryService_GetHosts_Call {
	_c.Call.Return(run)
	return _c
}
