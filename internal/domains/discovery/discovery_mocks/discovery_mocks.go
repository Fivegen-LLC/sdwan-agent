// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package discovery_mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockIHTTPClientService creates a new instance of MockIHTTPClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIHTTPClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIHTTPClientService {
	mock := &MockIHTTPClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIHTTPClientService is an autogenerated mock type for the IHTTPClientService type
type MockIHTTPClientService struct {
	mock.Mock
}

type MockIHTTPClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIHTTPClientService) EXPECT() *MockIHTTPClientService_Expecter {
	return &MockIHTTPClientService_Expecter{mock: &_m.Mock}
}

// CheckPrimary provides a mock function for the type MockIHTTPClientService
func (_mock *MockIHTTPClientService) CheckPrimary(host string) (bool, error) {
	ret := _mock.Called(host)

	if len(ret) == 0 {
		panic("no return value specified for CheckPrimary")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(host)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(host)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(host)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIHTTPClientService_CheckPrimary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPrimary'
type MockIHTTPClientService_CheckPrimary_Call struct {
	*mock.Call
}

// CheckPrimary is a helper method to define mock.On call
//   - host string
func (_e *MockIHTTPClientService_Expecter) CheckPrimary(host interface{}) *MockIHTTPClientService_CheckPrimary_Call {
	return &MockIHTTPClientService_CheckPrimary_Call{Call: _e.mock.On("CheckPrimary", host)}
}

func (_c *MockIHTTPClientService_CheckPrimary_Call) Run(run func(host string)) *MockIHTTPClientService_CheckPrimary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHTTPClientService_CheckPrimary_Call) Return(isPrimary bool, err error) *MockIHTTPClientService_CheckPrimary_Call {
	_c.Call.Return(isPrimary, err)
	return _c
}

func (_c *MockIHTTPClientService_CheckPrimary_Call) RunAndReturn(run func(host string) (bool, error)) *MockIHTTPClientService_CheckPrimary_Call {
	_c.Call.Return(run)
	return _c
}
